{"version":3,"file":"index.umd.js","sources":["../index.ts"],"sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nexport type TLogLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"none\";\n\nexport type TOptions = {\n  logLevel?: TLogLevel;\n  maxFontSize?: number;\n  minFontSize?: number;\n  onFinish?: (fontSize: number) => void;\n  onStart?: () => void;\n  resolution?: number;\n};\n\nconst LOG_LEVEL: Record<TLogLevel, number> = {\n  debug: 10,\n  info: 20,\n  warn: 30,\n  error: 40,\n  none: 100,\n};\n\n// Suppress `useLayoutEffect` warning when rendering on the server\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsoLayoutEffect =\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n    ? useLayoutEffect\n    : useEffect;\n\nconst useFitText = ({\n  logLevel: logLevelOption = \"info\",\n  maxFontSize = 100,\n  minFontSize = 20,\n  onFinish,\n  onStart,\n  resolution = 5,\n}: TOptions = {}) => {\n  const logLevel = LOG_LEVEL[logLevelOption];\n\n  const initState = useCallback(() => {\n    return {\n      calcKey: 0,\n      fontSize: maxFontSize,\n      fontSizePrev: minFontSize,\n      fontSizeMax: maxFontSize,\n      fontSizeMin: minFontSize,\n    };\n  }, [maxFontSize, minFontSize]);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const innerHtmlPrevRef = useRef<string>();\n  const isCalculatingRef = useRef(false);\n  const [state, setState] = useState(initState);\n  const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n\n  // Montior div size changes and recalculate on resize\n  let animationFrameId: number | null = null;\n  const [ro] = useState(\n    () =>\n      new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n          if (isCalculatingRef.current) {\n            return;\n          }\n          onStart && onStart();\n          isCalculatingRef.current = true;\n          // `calcKey` is used in the dependencies array of\n          // `useIsoLayoutEffect` below. It is incremented so that the font size\n          // will be recalculated even if the previous state didn't change (e.g.\n          // when the text fit initially).\n          setState({\n            ...initState(),\n            calcKey: calcKey + 1,\n          });\n        });\n      }),\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      ro.observe(ref.current);\n    }\n    return () => {\n      animationFrameId && window.cancelAnimationFrame(animationFrameId);\n      ro.disconnect();\n    };\n  }, [animationFrameId, ro]);\n\n  // Recalculate when the div contents change\n  const innerHtml = ref.current && ref.current.innerHTML;\n  useEffect(() => {\n    if (calcKey === 0 || isCalculatingRef.current) {\n      return;\n    }\n    if (innerHtml !== innerHtmlPrevRef.current) {\n      onStart && onStart();\n      setState({\n        ...initState(),\n        calcKey: calcKey + 1,\n      });\n    }\n    innerHtmlPrevRef.current = innerHtml;\n  }, [calcKey, initState, innerHtml, onStart]);\n\n  // Check overflow and resize font\n  useIsoLayoutEffect(() => {\n    // Don't start calculating font size until the `resizeKey` is incremented\n    // above in the `ResizeObserver` callback. This avoids an extra resize\n    // on initialization.\n    if (calcKey === 0) {\n      return;\n    }\n\n    const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;\n    const isOverflow =\n      !!ref.current &&\n      (ref.current.scrollHeight > ref.current.offsetHeight ||\n        ref.current.scrollWidth > ref.current.offsetWidth);\n    const isFailed = isOverflow && fontSize === fontSizePrev;\n    const isAsc = fontSize > fontSizePrev;\n\n    // Return if the font size has been adjusted \"enough\" (change within `resolution`)\n    // reduce font size by one increment if it's overflowing.\n    if (isWithinResolution) {\n      if (isFailed) {\n        isCalculatingRef.current = false;\n        if (logLevel <= LOG_LEVEL.info) {\n          console.info(\n            `[use-fit-text] reached \\`minFontSize = ${minFontSize}\\` without fitting text`,\n          );\n        }\n      } else if (isOverflow) {\n        setState({\n          fontSize: isAsc ? fontSizePrev : fontSizeMin,\n          fontSizeMax,\n          fontSizeMin,\n          fontSizePrev,\n          calcKey,\n        });\n      } else {\n        isCalculatingRef.current = false;\n        onFinish && onFinish(fontSize);\n      }\n      return;\n    }\n\n    // Binary search to adjust font size\n    let delta: number;\n    let newMax = fontSizeMax;\n    let newMin = fontSizeMin;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n      newMax = Math.min(fontSizeMax, fontSize);\n    } else {\n      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n      newMin = Math.max(fontSizeMin, fontSize);\n    }\n    setState({\n      calcKey,\n      fontSize: fontSize + delta / 2,\n      fontSizeMax: newMax,\n      fontSizeMin: newMin,\n      fontSizePrev: fontSize,\n    });\n  }, [\n    calcKey,\n    fontSize,\n    fontSizeMax,\n    fontSizeMin,\n    fontSizePrev,\n    onFinish,\n    ref,\n    resolution,\n  ]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"],"names":["debug","info","warn","error","none","window","document","createElement","useLayoutEffect","useEffect","logLevel","maxFontSize","minFontSize","onFinish","onStart","resolution","LOG_LEVEL","useCallback","calcKey","fontSize","fontSizePrev","fontSizeMax","fontSizeMin","useRef","useState","initState","state","setState","ro","animationFrameId","requestAnimationFrame","isCalculatingRef","current","ref","observe","cancelAnimationFrame","disconnect","innerHTML","innerHtml","innerHtmlPrevRef","useIsoLayoutEffect","Math","abs","scrollHeight","offsetHeight","scrollWidth","offsetWidth","isWithinResolution","isOverflow","console","isAsc","delta","newMax","min","newMin","max"],"mappings":"wbAmBA,MAA6C,CAC3CA,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,KAAM,OAMY,4BAClBC,OAAOC,UACPD,OAAOC,SAASC,cACZC,kBACAC,mBAEa,6BAOL,SANZC,aACAC,YAAAA,aAAc,UACdC,YAAAA,aAAc,KACdC,IAAAA,SACAC,IAAAA,YACAC,WAAAA,aAAa,MAEIC,aAPU,YASTC,cAAY,WAC5B,MAAO,CACLC,QAAS,EACTC,SAAUR,EACVS,aAAcR,EACdS,YAAaV,EACbW,YAAaV,IAEd,CAACD,EAAaC,MAELW,SAAuB,QACVA,aACAA,UAAO,KACNC,WAASC,GAA5BC,OAAOC,SACwDD,EAA9DR,QAASC,EAAqDO,EAArDP,SAAUE,EAA2CK,EAA3CL,YAAaC,EAA8BI,EAA9BJ,YAAaF,EAAiBM,EAAjBN,eAGf,KAC/BQ,EAAMJ,WACX,qCACqB,WACjBK,EAAmBxB,OAAOyB,sBAAsB,WAC1CC,EAAiBC,UAGrBlB,GAAWA,IACXiB,EAAiBC,SAAU,EAK3BL,OACKF,KACHP,QAASA,EAAU,eAM7BT,YAAU,WAIR,OAHIwB,EAAID,SACNJ,EAAGM,QAAQD,EAAID,oBAGfH,GAAoBxB,OAAO8B,qBAAqBN,GAChDD,EAAGQ,eAEJ,CAACP,EAAkBD,IAGtB,MAAkBK,EAAID,SAAWC,EAAID,QAAQK,UAsF7C,OArFA5B,YAAU,WACQ,IAAZS,GAAiBa,EAAiBC,UAGlCM,IAAcC,EAAiBP,UACjClB,GAAWA,IACXa,OACKF,KACHP,QAASA,EAAU,MAGvBqB,EAAiBP,QAAUM,IAC1B,CAACpB,EAASO,EAAWa,EAAWxB,IAGnC0B,EAAmB,WAIjB,GAAgB,IAAZtB,EAAJ,CAIA,MAA2BuB,KAAKC,IAAIvB,EAAWC,IAAiBL,MAE5DkB,EAAID,UACLC,EAAID,QAAQW,aAAeV,EAAID,QAAQY,cACtCX,EAAID,QAAQa,YAAcZ,EAAID,QAAQc,eAE5B3B,EAAWC,EAIzB,GAAI2B,EALaC,GAAc7B,IAAaC,GAOxCW,EAAiBC,SAAU,EACvBtB,GAAYM,EAAUf,MACxBgD,QAAQhD,8CACoCW,6BAGrCoC,EACTrB,EAAS,CACPR,SAAU+B,EAAQ9B,EAAeE,EACjCD,YAAAA,EACAC,YAAAA,EACAF,aAAAA,EACAF,QAAAA,KAGFa,EAAiBC,SAAU,EAC3BnB,GAAYA,EAASM,QAlBzB,CAwBA,QACaE,IACAC,EACT0B,GACFG,EAAQD,EAAQ9B,EAAeD,EAAWG,EAAcH,EACxDiC,EAASX,KAAKY,IAAIhC,EAAaF,KAE/BgC,EAAQD,EAAQ7B,EAAcF,EAAWC,EAAeD,EACxDmC,EAASb,KAAKc,IAAIjC,EAAaH,IAEjCQ,EAAS,CACPT,QAAAA,EACAC,SAAUA,EAAWgC,EAAQ,EAC7B9B,YAAa+B,EACb9B,YAAagC,EACblC,aAAcD,OAEf,CACDD,EACAC,EACAE,EACAC,EACAF,EACAP,EACAoB,EACAlB,IAGK,CAAEI,SAAaA,MAAac,IAAAA"}