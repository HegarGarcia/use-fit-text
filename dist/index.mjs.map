{"version":3,"file":"index.mjs","sources":["../index.ts"],"sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\ntype TOptions = {\n  maxFontSize?: number;\n  minFontSize?: number;\n  recalcOnResize?: boolean;\n  resolution?: number;\n};\n\n/**\n * React hook that iteratively adjusts the font size so that text will fit in\n * a div.\n *\n *   - checks if text is overflowing by using `scrollHeight` and `offsetHeight`\n *     https://stackoverflow.com/a/10017343/101911\n *   - uses binary search\n *   - with default parameters, makes a maximum of 5 adjustments with a\n *     resolution of 5% font size from 20-100%\n */\nconst useFitText = ({\n  maxFontSize = 100,\n  minFontSize = 20,\n  resolution = 5,\n}: TOptions = {}) => {\n  const initState = useCallback(\n    () => ({\n      fontSize: maxFontSize,\n      fontSizePrev: minFontSize,\n      fontSizeMax: maxFontSize,\n      fontSizeMin: minFontSize,\n    }),\n    [maxFontSize, minFontSize],\n  );\n\n  const ref = useRef<HTMLDivElement>(null);\n  const isFirstObserve = useRef(true);\n  const [state, setState] = useState(initState);\n  const { fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n\n  // montior div size changes and recalculate on resize\n  let animationFrameId: number | null = null;\n  const [ro] = useState(\n    () =>\n      new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n          if (isFirstObserve.current) {\n            isFirstObserve.current = false;\n            return;\n          }\n          setState(initState());\n        });\n      }),\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      ro.observe(ref.current);\n    }\n    return () => {\n      animationFrameId && window.cancelAnimationFrame(animationFrameId);\n      ro.disconnect();\n    };\n  }, [animationFrameId, ro]);\n\n  // check overflow and resize font\n  useLayoutEffect(() => {\n    const isDone = Math.abs(fontSize - fontSizePrev) <= resolution;\n    const isOverflow =\n      !!ref.current &&\n      (ref.current.scrollHeight > ref.current.offsetHeight ||\n        ref.current.scrollWidth > ref.current.offsetWidth);\n    const isAsc = fontSize > fontSizePrev;\n\n    // return if the font size has been adjusted \"enough\" (change within `resolution`)\n    // reduce font size by one increment if it's overflowing\n    if (isDone) {\n      if (isOverflow) {\n        const fontSizeNew =\n          fontSizePrev < fontSize\n            ? fontSizePrev\n            : fontSize - (fontSizePrev - fontSize);\n        setState({\n          fontSize: fontSizeNew,\n          fontSizeMax,\n          fontSizeMin,\n          fontSizePrev,\n        });\n      }\n      return;\n    }\n\n    // binary search to adjust font size\n    let delta: number;\n    let newMax = fontSizeMax;\n    let newMin = fontSizeMin;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n      newMax = Math.min(fontSizeMax, fontSize);\n    } else {\n      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n      newMin = Math.max(fontSizeMin, fontSize);\n    }\n    setState({\n      fontSize: fontSize + delta / 2,\n      fontSizeMax: newMax,\n      fontSizeMin: newMin,\n      fontSizePrev: fontSize,\n    });\n  }, [fontSize, fontSizeMax, fontSizeMin, fontSizePrev, ref, resolution]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"],"names":["ref$1","initState","useCallback","fontSize","maxFontSize","fontSizePrev","minFontSize","fontSizeMax","fontSizeMin","ref","useRef","isFirstObserve","useState","animationFrameId","ResizeObserver","window","requestAnimationFrame","current","setState","useEffect","ro","observe","cancelAnimationFrame","disconnect","useLayoutEffect","isDone","Math","abs","resolution","isOverflow","scrollHeight","offsetHeight","scrollWidth","offsetWidth","isAsc","delta","newMax","newMin","min","max"],"mappings":"kKA0BoBA,kBAIN,uCAHE,wCACA,sCACD,OAEPC,EAAYC,oBAEdC,SAAUC,EACVC,aAAcC,EACdC,YAAaH,EACbI,YAAaF,IAEf,CAACF,EAAaE,IAGVG,EAAMC,EAAuB,MAC7BC,EAAiBD,GAAO,KACJE,EAASX,+EAI/BY,EAAkC,OACzBD,oBAET,IAAIE,aACFD,EAAmBE,OAAOC,iCACpBL,EAAeM,QACjBN,EAAeM,SAAU,EAG3BC,EAASjB,qBAKjBkB,oBACMV,EAAIQ,SACNG,EAAGC,QAAQZ,EAAIQ,oBAGfJ,GAAoBE,OAAOO,qBAAqBT,GAChDO,EAAGG,eAEJ,CAACV,EAAkBO,IAGtBI,iBACQC,EAASC,KAAKC,IAAIxB,EAAWE,IAAiBuB,EAC9CC,IACFpB,EAAIQ,UACLR,EAAIQ,QAAQa,aAAerB,EAAIQ,QAAQc,cACtCtB,EAAIQ,QAAQe,YAAcvB,EAAIQ,QAAQgB,aACpCC,EAAQ/B,EAAWE,KAIrBoB,EACEI,GAKFX,EAAS,CACPf,SAJAE,EAAeF,EACXE,EACAF,GAAYE,EAAeF,eAG/BI,cACAC,eACAH,aAOF8B,EACAC,EAAS7B,EACT8B,EAAS7B,EACTqB,GACFM,EAAQD,EAAQ7B,EAAeF,EAAWK,EAAcL,EACxDiC,EAASV,KAAKY,IAAI/B,EAAaJ,KAE/BgC,EAAQD,EAAQ3B,EAAcJ,EAAWE,EAAeF,EACxDkC,EAASX,KAAKa,IAAI/B,EAAaL,IAEjCe,EAAS,CACPf,SAAUA,EAAWgC,EAAQ,EAC7B5B,YAAa6B,EACb5B,YAAa6B,EACbhC,aAAcF,MAEf,CAACA,EAAUI,EAAaC,EAAaH,EAAcI,EAAKmB,IAEpD,CAAEzB,SAAaA,UAAaM"}