{"version":3,"file":"index.js","sources":["../index.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\n/**\n * React hook that iteratively adjusts the font size so that text will fit in\n * a div.\n *\n *   - checks if text is overflowing by using `scrollHeight` and `offsetHeight`\n *     https://stackoverflow.com/a/10017343/101911\n *   - uses binary search; makes a maximum of 5 adjustments with a resolution\n *     of 5% font size from 20-100%\n */\nconst useFitText = () => {\n  const MIN_FONT_SIZE = 20;\n  const MAX_FONT_SIZE = 100;\n  const RESOLUTION = 5;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState({\n    fontSize: MAX_FONT_SIZE,\n    fontSizePrev: MIN_FONT_SIZE,\n  });\n  const { fontSize, fontSizePrev } = state;\n\n  useEffect(() => {\n    const isDone = Math.abs(fontSize - fontSizePrev) <= RESOLUTION;\n    const isOverflow =\n      !!ref.current && ref.current.scrollHeight > ref.current.offsetHeight;\n    const isAsc = fontSize > fontSizePrev;\n\n    // return if the font size has been adjusted \"enough\" (change within RESOLUTION)\n    // reduce font size by one increment if it's overflowing\n    if (isDone) {\n      if (isOverflow) {\n        const fontSizeNew =\n          fontSizePrev < fontSize\n            ? fontSizePrev\n            : fontSize - (fontSizePrev - fontSize);\n        setState({ fontSize: fontSizeNew, fontSizePrev });\n      }\n      return;\n    }\n\n    // binary search to adjust font size\n    let delta;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : MIN_FONT_SIZE - fontSize;\n    } else {\n      delta = isAsc ? MAX_FONT_SIZE - fontSize : fontSizePrev - fontSize;\n    }\n    setState({\n      fontSize: fontSize + delta / 2,\n      fontSizePrev: fontSize,\n    });\n  }, [fontSize, fontSizePrev, ref]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"],"names":["ref","useRef","useState","fontSize","fontSizePrev","useEffect","isDone","Math","abs","isOverflow","current","scrollHeight","offsetHeight","isAsc","setState"],"mappings":"qDAgBQA,EAAMC,SAAuB,QAETC,WAAS,CACjCC,SANoB,IAOpBC,aARoB,wDAYtBC,2BACQC,EAASC,KAAKC,IAAIL,EAAWC,IAXlB,EAYXK,IACFT,EAAIU,SAAWV,EAAIU,QAAQC,aAAeX,EAAIU,QAAQE,aACpDC,EAAQV,EAAWC,EAIrBE,EACEG,GAKFK,EAAS,CAAEX,SAHTC,EAAeD,EACXC,EACAD,GAAYC,EAAeD,gBACCC,IAYtCU,EAAS,CACPX,SAAUA,GANRM,EACMI,EAAQT,EAAeD,EAlCb,GAkCwCA,EAElDU,EAnCU,IAmCcV,EAAWC,EAAeD,GAG7B,EAC7BC,aAAcD,KAEf,CAACA,EAAUC,EAAcJ,IAErB,CAAEG,SAAaA,UAAaH"}